; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\usbd_user_cdc_acm_0.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usbd_user_cdc_acm_0.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\STM32F103C8 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.6.0\CMSIS\Driver\Include -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.6.0\CMSIS\RTOS\RTX\INC -IC:\Keil_v5\ARM\PACK\Keil\MDK-Middleware\7.9.0\USB\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\StdPeriph_Driver\inc -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\RTE_Driver -D__RTX -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_MD --omf_browse=.\objects\usbd_user_cdc_acm_0.crf USBD_User_CDC_ACM_0.c]
                          THUMB

                          AREA ||i.USBD_CDC0_ACM_DataReceived||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  USBD_CDC0_ACM_DataReceived PROC
;;;118    // \param [in]  len           number of bytes available for reading.
;;;119    void USBD_CDC0_ACM_DataReceived (uint32_t len) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
;;;120      // Add code for handling new data reception
;;;121    	//printf("USB ACM Data Received:%d", len);
;;;122    
;;;123    	char datain[8]= { 0 };
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
;;;124    	USBD_CDC_ACM_ReadData( 0, datain, len );
00000a  4622              MOV      r2,r4
00000c  4669              MOV      r1,sp
00000e  f7fffffe          BL       USBD_CDC_ACM_ReadData
;;;125    	printf( "USB ACM Data Received(%d):%s", len, datain );
000012  466a              MOV      r2,sp
000014  4621              MOV      r1,r4
000016  a002              ADR      r0,|L1.32|
000018  f7fffffe          BL       __2printf
;;;126    
;;;127    }
00001c  bd1c              POP      {r2-r4,pc}
;;;128     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
000020  55534220          DCB      "USB ACM Data Received(%d):%s",0
000024  41434d20
000028  44617461
00002c  20526563
000030  65697665
000034  64282564
000038  293a2573
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.USBD_CDC0_ACM_DataSent||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_DataSent PROC
;;;130    // Called when when all data was sent.
;;;131    void USBD_CDC0_ACM_DataSent (void) {
000000  b510              PUSH     {r4,lr}
;;;132      // Add code for handling new data send
;;;133    	printf("USB ACM Data Sent\n");
000002  a002              ADR      r0,|L2.12|
000004  f7fffffe          BL       __2printf
;;;134    }
000008  bd10              POP      {r4,pc}
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
00000c  55534220          DCB      "USB ACM Data Sent\n",0
000010  41434d20
000014  44617461
000018  2053656e
00001c  740a00  
00001f  00                DCB      0

                          AREA ||i.USBD_CDC0_ACM_GetEncapsulatedResponse||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_GetEncapsulatedResponse PROC
;;;61     // \return      false         get encapsulated response request not supported or not processed.
;;;62     bool USBD_CDC0_ACM_GetEncapsulatedResponse (uint16_t max_len, uint8_t **buf, uint16_t *len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;63     	printf("USB get encapsulation response\n");
000008  a002              ADR      r0,|L3.20|
00000a  f7fffffe          BL       __2printf
;;;64       return true;
00000e  2001              MOVS     r0,#1
;;;65     }
000010  bd70              POP      {r4-r6,pc}
;;;66      
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
000014  55534220          DCB      "USB get encapsulation response\n",0
000018  67657420
00001c  656e6361
000020  7073756c
000024  6174696f
000028  6e207265
00002c  73706f6e
000030  73650a00

                          AREA ||i.USBD_CDC0_ACM_GetLineCoding||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_GetLineCoding PROC
;;;90     // \return      false         get line coding request not supported or not processed.
;;;91     bool USBD_CDC0_ACM_GetLineCoding (CDC_LINE_CODING *line_coding) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;92     	
;;;93     	printf("USB get line coding\n");
000004  a005              ADR      r0,|L4.28|
000006  f7fffffe          BL       __2printf
;;;94       // Load settings from ones stored on USBD_CDCn_ACM_SetLineCoding callback
;;;95       *line_coding = cdc_acm_line_coding;
00000a  480a              LDR      r0,|L4.52|
00000c  6801              LDR      r1,[r0,#0]  ; cdc_acm_line_coding
00000e  6021              STR      r1,[r4,#0]
000010  8881              LDRH     r1,[r0,#4]  ; cdc_acm_line_coding
000012  80a1              STRH     r1,[r4,#4]
000014  7980              LDRB     r0,[r0,#6]  ; cdc_acm_line_coding
000016  71a0              STRB     r0,[r4,#6]
;;;96      
;;;97       return true;
000018  2001              MOVS     r0,#1
;;;98     }
00001a  bd10              POP      {r4,pc}
;;;99      
                          ENDP

                  |L4.28|
00001c  55534220          DCB      "USB get line coding\n",0
000020  67657420
000024  6c696e65
000028  20636f64
00002c  696e670a
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L4.52|
                          DCD      cdc_acm_line_coding

                          AREA ||i.USBD_CDC0_ACM_Initialize||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_Initialize PROC
;;;21     // Called during USBD_Initialize to initialize the USB CDC class instance (ACM).
;;;22     void USBD_CDC0_ACM_Initialize (void) {
000000  b510              PUSH     {r4,lr}
;;;23       // Add code for initialization
;;;24     	
;;;25     	printf("USB init\n");
000002  a002              ADR      r0,|L5.12|
000004  f7fffffe          BL       __2printf
;;;26     	
;;;27     }
000008  bd10              POP      {r4,pc}
;;;28      
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
00000c  55534220          DCB      "USB init\n",0
000010  696e6974
000014  0a00    
000016  00                DCB      0
000017  00                DCB      0

                          AREA ||i.USBD_CDC0_ACM_Reset||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_Reset PROC
;;;38     // Called upon USB Bus Reset Event.
;;;39     void USBD_CDC0_ACM_Reset (void) {
000000  b510              PUSH     {r4,lr}
;;;40       // Add code for reset
;;;41     	printf("USB_CDC0_ACM_RESET\n");
000002  a002              ADR      r0,|L6.12|
000004  f7fffffe          BL       __2printf
;;;42     }
000008  bd10              POP      {r4,pc}
;;;43      
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
00000c  5553425f          DCB      "USB_CDC0_ACM_RESET\n",0
000010  43444330
000014  5f41434d
000018  5f524553
00001c  45540a00

                          AREA ||i.USBD_CDC0_ACM_SendEncapsulatedCommand||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_SendEncapsulatedCommand PROC
;;;49     // \return      false         send encapsulated command request not supported or not processed.
;;;50     bool USBD_CDC0_ACM_SendEncapsulatedCommand (const uint8_t *buf, uint16_t len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;51     	printf("USB send Encapsulation Request Command\n");
000006  a002              ADR      r0,|L7.16|
000008  f7fffffe          BL       __2printf
;;;52       return true;
00000c  2001              MOVS     r0,#1
;;;53     }
00000e  bd70              POP      {r4-r6,pc}
;;;54      
                          ENDP

                  |L7.16|
000010  55534220          DCB      "USB send Encapsulation Request Command\n",0
000014  73656e64
000018  20456e63
00001c  61707375
000020  6c617469
000024  6f6e2052
000028  65717565
00002c  73742043
000030  6f6d6d61
000034  6e640a00

                          AREA ||i.USBD_CDC0_ACM_SetControlLineState||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_SetControlLineState PROC
;;;106    // \return      false         set control line state request not supported or not processed.
;;;107    bool USBD_CDC0_ACM_SetControlLineState (uint16_t state) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;108      // Add code for set control line state
;;;109    	printf("USB set control line state\n");
000004  a002              ADR      r0,|L8.16|
000006  f7fffffe          BL       __2printf
;;;110     
;;;111      (void)(state);
;;;112     
;;;113      return true;
00000a  2001              MOVS     r0,#1
;;;114    }
00000c  bd10              POP      {r4,pc}
;;;115     
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
000010  55534220          DCB      "USB set control line state\n",0
000014  73657420
000018  636f6e74
00001c  726f6c20
000020  6c696e65
000024  20737461
000028  74650a00

                          AREA ||i.USBD_CDC0_ACM_SetLineCoding||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USBD_CDC0_ACM_SetLineCoding PROC
;;;71     // \return      false         set line coding request not supported or not processed.
;;;72     bool USBD_CDC0_ACM_SetLineCoding (const CDC_LINE_CODING *line_coding) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;73       // Add code for set line coding
;;;74     	printf("---USB Set Line Coding---\n");
000004  a00d              ADR      r0,|L9.60|
000006  f7fffffe          BL       __2printf
;;;75     	printf("DTE rate bps\t\t%d\n", line_coding->dwDTERate);
00000a  6821              LDR      r1,[r4,#0]
00000c  a012              ADR      r0,|L9.88|
00000e  f7fffffe          BL       __2printf
;;;76     	printf("No stop bits\t\t%d\n", line_coding->bCharFormat);
000012  7921              LDRB     r1,[r4,#4]
000014  a015              ADR      r0,|L9.108|
000016  f7fffffe          BL       __2printf
;;;77     	printf("Parity type \t\t%d\n", line_coding->bParityType);
00001a  7961              LDRB     r1,[r4,#5]
00001c  a018              ADR      r0,|L9.128|
00001e  f7fffffe          BL       __2printf
;;;78     	printf("No Data Bits\t\t%d\n", line_coding->bDataBits);
000022  79a1              LDRB     r1,[r4,#6]
000024  a01b              ADR      r0,|L9.148|
000026  f7fffffe          BL       __2printf
;;;79     	
;;;80       // Store requested settings to local variable
;;;81       cdc_acm_line_coding = *line_coding;
00002a  481f              LDR      r0,|L9.168|
00002c  6821              LDR      r1,[r4,#0]
00002e  6001              STR      r1,[r0,#0]  ; cdc_acm_line_coding
000030  88a1              LDRH     r1,[r4,#4]
000032  8081              STRH     r1,[r0,#4]
000034  79a1              LDRB     r1,[r4,#6]
000036  7181              STRB     r1,[r0,#6]
;;;82      
;;;83       return true;
000038  2001              MOVS     r0,#1
;;;84     }
00003a  bd10              POP      {r4,pc}
;;;85      
                          ENDP

                  |L9.60|
00003c  2d2d2d55          DCB      "---USB Set Line Coding---\n",0
000040  53422053
000044  6574204c
000048  696e6520
00004c  436f6469
000050  6e672d2d
000054  2d0a00  
000057  00                DCB      0
                  |L9.88|
000058  44544520          DCB      "DTE rate bps\t\t%d\n",0
00005c  72617465
000060  20627073
000064  09092564
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L9.108|
00006c  4e6f2073          DCB      "No stop bits\t\t%d\n",0
000070  746f7020
000074  62697473
000078  09092564
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L9.128|
000080  50617269          DCB      "Parity type \t\t%d\n",0
000084  74792074
000088  79706520
00008c  09092564
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L9.148|
000094  4e6f2044          DCB      "No Data Bits\t\t%d\n",0
000098  61746120
00009c  42697473
0000a0  09092564
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L9.168|
                          DCD      cdc_acm_line_coding

                          AREA ||i.USBD_CDC0_ACM_Uninitialize||, CODE, READONLY, ALIGN=2

                  USBD_CDC0_ACM_Uninitialize PROC
;;;30     // Called during USBD_Uninitialize to de-initialize the USB CDC class instance (ACM).
;;;31     void USBD_CDC0_ACM_Uninitialize (void) {
000000  b510              PUSH     {r4,lr}
;;;32       // Add code for de-initialization
;;;33     	printf("USB deinit\n");
000002  a002              ADR      r0,|L10.12|
000004  f7fffffe          BL       __2printf
;;;34     	
;;;35     }
000008  bd10              POP      {r4,pc}
;;;36      
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
00000c  55534220          DCB      "USB deinit\n",0
000010  6465696e
000014  69740a00

                          AREA ||.data||, DATA, ALIGN=0

                  cdc_acm_line_coding
                          DCDU     0x00000000
000004  000000            DCB      0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "USBD_User_CDC_ACM_0.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_USBD_User_CDC_ACM_0_c_5ca0aa6f____REV16|
#line 492 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.6.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___21_USBD_User_CDC_ACM_0_c_5ca0aa6f____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_USBD_User_CDC_ACM_0_c_5ca0aa6f____REVSH|
#line 507
|__asm___21_USBD_User_CDC_ACM_0_c_5ca0aa6f____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_USBD_User_CDC_ACM_0_c_5ca0aa6f____RRX|
#line 694
|__asm___21_USBD_User_CDC_ACM_0_c_5ca0aa6f____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
